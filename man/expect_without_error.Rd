% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/expect-no-condition.R
\name{expect_without_error}
\alias{expect_without_error}
\alias{expect_without_warning}
\alias{expect_without_message}
\alias{expect_without_condition}
\title{Does code run without error, warning, message, or other condition?}
\usage{
expect_without_error(object, ..., message = NULL, class = NULL)

expect_without_warning(object, ..., message = NULL, class = NULL)

expect_without_message(object, ..., message = NULL, class = NULL)

expect_without_condition(object, ..., message = NULL, class = NULL)
}
\arguments{
\item{object}{Object to test.

Supports limited unquoting to make it easier to generate readable failures
within a function or for loop. See \link{quasi_label} for more details.}

\item{...}{These dots are for future extensions and must be empty.}

\item{message, class}{The default usage with \verb{message = NULL, class = NULL}
will match any error/warning/message/condition. This is a broad assertion
so you'll typically want to make it narrower by either supplying \code{message}
(a regular expression that must match the message of the condition) or
\code{class} (which the condition must inherit from).}
}
\description{
These expectations are the opposite of \code{\link[=expect_error]{expect_error()}},
\code{expect_warning()}, \code{expect_message()}, and \code{expect_condition()}. They assert the absence of an error, warning, or message, respectively.
}
\examples{
expect_without_warning(1 + 1)

foo <- function(x) {
  warning("This is a problem!")
}

# warning doesn't match so bubbles up:
expect_without_warning(foo(), message = "bananas")

# warning does match so causes a failure:
try(expect_without_warning(foo(), message = "problem"))
}
